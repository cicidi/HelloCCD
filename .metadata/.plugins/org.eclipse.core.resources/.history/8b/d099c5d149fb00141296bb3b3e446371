package com.cicidi.generic.apple_screen;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContainerMgt<K, V> {

	Container<Integer, Fruit> fruitContainer = new Container<Integer, Fruit>();
	Container<Integer, Apple> appleContainer = new Container<Integer, Apple>();
	Container<Integer, Orange> orangeContainer = new Container<Integer, Orange>();
	Container<Integer, Pear> pearContainer = new Container<Integer, Pear>();
	Map<String, Container<K, V>> map = new HashMap<String, Container<K, V>>();
	static {
		map.put("Apple", fruitContainer);

	}

	public ContainerMgt() {
		super();
		map.put("Apple", (Container<K, V>) fruitContainer);
	}

	public void add(Fruit fruit) {
		fruitContainer.add(fruit.getId(), fruit);
		if (fruit instanceof Apple) {

			appleContainer.add(((Apple) fruit).getId(), (Apple) fruit);
		}
		if (fruit instanceof Pear) {
			pearContainer.add(((Pear) fruit).getId(), (Pear) fruit);
		}
		if (fruit instanceof Orange)
			orangeContainer.add(((Orange) fruit).getId(), (Orange) fruit);

	}

	public void remove(Fruit fruit) {
		fruitContainer.remove(fruit.getId());
		if (fruit instanceof Apple) {

			appleContainer.remove(((Apple) fruit).getId());
		}
		if (fruit instanceof Pear) {

			pearContainer.remove(((Pear) fruit).getId());
		}
		if (fruit instanceof Orange) {

			orangeContainer.remove(((Apple) fruit).getId());
		}

	}

	@SuppressWarnings("unchecked")
	public List<V> iterator(String type) {
		switch (type) {
		case "Fruit": {
			return (List<V>) fruitContainer.iterator();
		}
		case "Apple": {
			return (List<V>) appleContainer.iterator();
		}
		case "Pear": {
			return (List<V>) pearContainer.iterator();
		}
		case "Orange": {
			return (List<V>) orangeContainer.iterator();
		}
		}
		return null;
	}

}
