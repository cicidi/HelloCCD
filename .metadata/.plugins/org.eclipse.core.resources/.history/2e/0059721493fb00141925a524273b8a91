package com.cicidi.generic.apple_screen;

import java.util.List;

import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

public class FruitContainerTest {
	static FruitContainer fruitConatiner;
	static Apple app1;
	static Apple app2;
	static Orange org1;
	static Orange org2;

	static Pear pear1;
	static Pear pear2;
	static Pear pear3;
	List<Pear> applelist = fruitConatiner.findAll(FruitType.Apple);
	List<Pear> pearlist = fruitConatiner.findAll(FruitType.Pear);
	List<Pear> orangelist = fruitConatiner.findAll(FruitType.Orange);
	List<Pear> fruitlist = fruitConatiner.findAll(FruitType.Fruit);

	@Test
	public void testAdd() {

		Assert.assertEquals(applelist.size(), 2);
		Assert.assertEquals(pearlist.size(), 3);
		Assert.assertEquals(orangelist.size(), 2);
		Assert.assertEquals(fruitlist.size(), 7);

	}

	@Test
	public void testRemove() {
		fruitConatiner.add(app1);
		fruitConatiner.add(app2);
		fruitConatiner.add(org1);
		fruitConatiner.add(org2);
		fruitConatiner.add(pear1);
		fruitConatiner.add(pear2);
		fruitConatiner.add(pear3);
		fruitConatiner.remove(pear2);
		List<Pear> applelist = fruitConatiner.findAll(FruitType.Apple);
		List<Pear> pearlist = fruitConatiner.findAll(FruitType.Pear);
		List<Pear> orangelist = fruitConatiner.findAll(FruitType.Orange);
		List<Pear> fruitlist = fruitConatiner.findAll(FruitType.Fruit);
		Assert.assertEquals(applelist.size(), 2);
		Assert.assertEquals(pearlist.size(), 2);
		Assert.assertEquals(orangelist.size(), 2);
		Assert.assertEquals(fruitlist.size(), 6);
	}

	@Test
	public void testSequenceOrder() {
		// fail("Not yet implemented");
	}

	@BeforeClass
	public static void initFruit() {
		fruitConatiner = new FruitContainer();
		app1 = new Apple(001, "app1");
		app2 = new Apple(002, "app2");

		org1 = new Orange(101, "org1");
		org2 = new Orange(102, "org2");

		pear1 = new Pear(203, "pear1");
		pear2 = new Pear(202, "pear2");
		pear3 = new Pear(201, "pear3");
		fruitConatiner.add(app1);
		fruitConatiner.add(app2);
		fruitConatiner.add(org1);
		fruitConatiner.add(org2);
		fruitConatiner.add(pear1);
		fruitConatiner.add(pear2);
		fruitConatiner.add(pear3);
		applelist = fruitConatiner.findAll(FruitType.Apple);
		pearlist = fruitConatiner.findAll(FruitType.Pear);
		orangelist = fruitConatiner.findAll(FruitType.Orange);
		fruitlist = fruitConatiner.findAll(FruitType.Fruit);
	}

}
